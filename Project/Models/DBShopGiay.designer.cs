#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Project.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QL_SHOPGIAY")]
	public partial class DBShopGiayDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCTHD(CTHD instance);
    partial void UpdateCTHD(CTHD instance);
    partial void DeleteCTHD(CTHD instance);
    partial void InsertUSER(USER instance);
    partial void UpdateUSER(USER instance);
    partial void DeleteUSER(USER instance);
    partial void InsertCTPHIEUNHAP(CTPHIEUNHAP instance);
    partial void UpdateCTPHIEUNHAP(CTPHIEUNHAP instance);
    partial void DeleteCTPHIEUNHAP(CTPHIEUNHAP instance);
    partial void InsertDANHGIA(DANHGIA instance);
    partial void UpdateDANHGIA(DANHGIA instance);
    partial void DeleteDANHGIA(DANHGIA instance);
    partial void InsertHOADON(HOADON instance);
    partial void UpdateHOADON(HOADON instance);
    partial void DeleteHOADON(HOADON instance);
    partial void InsertNHACC(NHACC instance);
    partial void UpdateNHACC(NHACC instance);
    partial void DeleteNHACC(NHACC instance);
    partial void InsertPHIEUNHAP(PHIEUNHAP instance);
    partial void UpdatePHIEUNHAP(PHIEUNHAP instance);
    partial void DeletePHIEUNHAP(PHIEUNHAP instance);
    partial void InsertROLE(ROLE instance);
    partial void UpdateROLE(ROLE instance);
    partial void DeleteROLE(ROLE instance);
    partial void InsertSANPHAM(SANPHAM instance);
    partial void UpdateSANPHAM(SANPHAM instance);
    partial void DeleteSANPHAM(SANPHAM instance);
    partial void InsertTHUONGHIEU(THUONGHIEU instance);
    partial void UpdateTHUONGHIEU(THUONGHIEU instance);
    partial void DeleteTHUONGHIEU(THUONGHIEU instance);
    #endregion
		
		public DBShopGiayDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["QL_SHOPGIAYConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBShopGiayDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBShopGiayDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBShopGiayDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBShopGiayDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CTHD> CTHDs
		{
			get
			{
				return this.GetTable<CTHD>();
			}
		}
		
		public System.Data.Linq.Table<USER> USERs
		{
			get
			{
				return this.GetTable<USER>();
			}
		}
		
		public System.Data.Linq.Table<CTPHIEUNHAP> CTPHIEUNHAPs
		{
			get
			{
				return this.GetTable<CTPHIEUNHAP>();
			}
		}
		
		public System.Data.Linq.Table<DANHGIA> DANHGIAs
		{
			get
			{
				return this.GetTable<DANHGIA>();
			}
		}
		
		public System.Data.Linq.Table<HOADON> HOADONs
		{
			get
			{
				return this.GetTable<HOADON>();
			}
		}
		
		public System.Data.Linq.Table<NHACC> NHACCs
		{
			get
			{
				return this.GetTable<NHACC>();
			}
		}
		
		public System.Data.Linq.Table<PHIEUNHAP> PHIEUNHAPs
		{
			get
			{
				return this.GetTable<PHIEUNHAP>();
			}
		}
		
		public System.Data.Linq.Table<ROLE> ROLEs
		{
			get
			{
				return this.GetTable<ROLE>();
			}
		}
		
		public System.Data.Linq.Table<SANPHAM> SANPHAMs
		{
			get
			{
				return this.GetTable<SANPHAM>();
			}
		}
		
		public System.Data.Linq.Table<THUONGHIEU> THUONGHIEUs
		{
			get
			{
				return this.GetTable<THUONGHIEU>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CTHD")]
	public partial class CTHD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDCTHD;
		
		private System.Nullable<int> _IDHD;
		
		private System.Nullable<int> _IDSP;
		
		private System.Nullable<int> _SL;
		
		private System.Nullable<int> _DONGIA;
		
		private EntityRef<HOADON> _HOADON;
		
		private EntityRef<SANPHAM> _SANPHAM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCTHDChanging(int value);
    partial void OnIDCTHDChanged();
    partial void OnIDHDChanging(System.Nullable<int> value);
    partial void OnIDHDChanged();
    partial void OnIDSPChanging(System.Nullable<int> value);
    partial void OnIDSPChanged();
    partial void OnSLChanging(System.Nullable<int> value);
    partial void OnSLChanged();
    partial void OnDONGIAChanging(System.Nullable<int> value);
    partial void OnDONGIAChanged();
    #endregion
		
		public CTHD()
		{
			this._HOADON = default(EntityRef<HOADON>);
			this._SANPHAM = default(EntityRef<SANPHAM>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCTHD", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDCTHD
		{
			get
			{
				return this._IDCTHD;
			}
			set
			{
				if ((this._IDCTHD != value))
				{
					this.OnIDCTHDChanging(value);
					this.SendPropertyChanging();
					this._IDCTHD = value;
					this.SendPropertyChanged("IDCTHD");
					this.OnIDCTHDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDHD", DbType="Int")]
		public System.Nullable<int> IDHD
		{
			get
			{
				return this._IDHD;
			}
			set
			{
				if ((this._IDHD != value))
				{
					if (this._HOADON.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDHDChanging(value);
					this.SendPropertyChanging();
					this._IDHD = value;
					this.SendPropertyChanged("IDHD");
					this.OnIDHDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSP", DbType="Int")]
		public System.Nullable<int> IDSP
		{
			get
			{
				return this._IDSP;
			}
			set
			{
				if ((this._IDSP != value))
				{
					if (this._SANPHAM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSPChanging(value);
					this.SendPropertyChanging();
					this._IDSP = value;
					this.SendPropertyChanged("IDSP");
					this.OnIDSPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SL", DbType="Int")]
		public System.Nullable<int> SL
		{
			get
			{
				return this._SL;
			}
			set
			{
				if ((this._SL != value))
				{
					this.OnSLChanging(value);
					this.SendPropertyChanging();
					this._SL = value;
					this.SendPropertyChanged("SL");
					this.OnSLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DONGIA", DbType="Int")]
		public System.Nullable<int> DONGIA
		{
			get
			{
				return this._DONGIA;
			}
			set
			{
				if ((this._DONGIA != value))
				{
					this.OnDONGIAChanging(value);
					this.SendPropertyChanging();
					this._DONGIA = value;
					this.SendPropertyChanged("DONGIA");
					this.OnDONGIAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HOADON_CTHD", Storage="_HOADON", ThisKey="IDHD", OtherKey="IDHD", IsForeignKey=true)]
		public HOADON HOADON
		{
			get
			{
				return this._HOADON.Entity;
			}
			set
			{
				HOADON previousValue = this._HOADON.Entity;
				if (((previousValue != value) 
							|| (this._HOADON.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HOADON.Entity = null;
						previousValue.CTHDs.Remove(this);
					}
					this._HOADON.Entity = value;
					if ((value != null))
					{
						value.CTHDs.Add(this);
						this._IDHD = value.IDHD;
					}
					else
					{
						this._IDHD = default(Nullable<int>);
					}
					this.SendPropertyChanged("HOADON");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SANPHAM_CTHD", Storage="_SANPHAM", ThisKey="IDSP", OtherKey="IDSP", IsForeignKey=true)]
		public SANPHAM SANPHAM
		{
			get
			{
				return this._SANPHAM.Entity;
			}
			set
			{
				SANPHAM previousValue = this._SANPHAM.Entity;
				if (((previousValue != value) 
							|| (this._SANPHAM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SANPHAM.Entity = null;
						previousValue.CTHDs.Remove(this);
					}
					this._SANPHAM.Entity = value;
					if ((value != null))
					{
						value.CTHDs.Add(this);
						this._IDSP = value.IDSP;
					}
					else
					{
						this._IDSP = default(Nullable<int>);
					}
					this.SendPropertyChanged("SANPHAM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.USERS")]
	public partial class USER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDUSER;
		
		private System.Nullable<int> _IDROLE;
		
		private string _HOTEN;
		
		private string _EMAIL;
		
		private string _DCHI;
		
		private string _SDT;
		
		private System.Nullable<System.DateTime> _NGSINH;
		
		private string _USERNAME;
		
		private string _PASSWORD;
		
		private EntitySet<DANHGIA> _DANHGIAs;
		
		private EntitySet<HOADON> _HOADONs;
		
		private EntityRef<ROLE> _ROLE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDUSERChanging(int value);
    partial void OnIDUSERChanged();
    partial void OnIDROLEChanging(System.Nullable<int> value);
    partial void OnIDROLEChanged();
    partial void OnHOTENChanging(string value);
    partial void OnHOTENChanged();
    partial void OnEMAILChanging(string value);
    partial void OnEMAILChanged();
    partial void OnDCHIChanging(string value);
    partial void OnDCHIChanged();
    partial void OnSDTChanging(string value);
    partial void OnSDTChanged();
    partial void OnNGSINHChanging(System.Nullable<System.DateTime> value);
    partial void OnNGSINHChanged();
    partial void OnUSERNAMEChanging(string value);
    partial void OnUSERNAMEChanged();
    partial void OnPASSWORDChanging(string value);
    partial void OnPASSWORDChanged();
    #endregion
		
		public USER()
		{
			this._DANHGIAs = new EntitySet<DANHGIA>(new Action<DANHGIA>(this.attach_DANHGIAs), new Action<DANHGIA>(this.detach_DANHGIAs));
			this._HOADONs = new EntitySet<HOADON>(new Action<HOADON>(this.attach_HOADONs), new Action<HOADON>(this.detach_HOADONs));
			this._ROLE = default(EntityRef<ROLE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUSER", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDUSER
		{
			get
			{
				return this._IDUSER;
			}
			set
			{
				if ((this._IDUSER != value))
				{
					this.OnIDUSERChanging(value);
					this.SendPropertyChanging();
					this._IDUSER = value;
					this.SendPropertyChanged("IDUSER");
					this.OnIDUSERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDROLE", DbType="Int")]
		public System.Nullable<int> IDROLE
		{
			get
			{
				return this._IDROLE;
			}
			set
			{
				if ((this._IDROLE != value))
				{
					if (this._ROLE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDROLEChanging(value);
					this.SendPropertyChanging();
					this._IDROLE = value;
					this.SendPropertyChanged("IDROLE");
					this.OnIDROLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HOTEN", DbType="NVarChar(50)")]
		public string HOTEN
		{
			get
			{
				return this._HOTEN;
			}
			set
			{
				if ((this._HOTEN != value))
				{
					this.OnHOTENChanging(value);
					this.SendPropertyChanging();
					this._HOTEN = value;
					this.SendPropertyChanged("HOTEN");
					this.OnHOTENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMAIL", DbType="VarChar(100)")]
		public string EMAIL
		{
			get
			{
				return this._EMAIL;
			}
			set
			{
				if ((this._EMAIL != value))
				{
					this.OnEMAILChanging(value);
					this.SendPropertyChanging();
					this._EMAIL = value;
					this.SendPropertyChanged("EMAIL");
					this.OnEMAILChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DCHI", DbType="NVarChar(255)")]
		public string DCHI
		{
			get
			{
				return this._DCHI;
			}
			set
			{
				if ((this._DCHI != value))
				{
					this.OnDCHIChanging(value);
					this.SendPropertyChanging();
					this._DCHI = value;
					this.SendPropertyChanged("DCHI");
					this.OnDCHIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SDT", DbType="VarChar(20)")]
		public string SDT
		{
			get
			{
				return this._SDT;
			}
			set
			{
				if ((this._SDT != value))
				{
					this.OnSDTChanging(value);
					this.SendPropertyChanging();
					this._SDT = value;
					this.SendPropertyChanged("SDT");
					this.OnSDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NGSINH", DbType="DateTime")]
		public System.Nullable<System.DateTime> NGSINH
		{
			get
			{
				return this._NGSINH;
			}
			set
			{
				if ((this._NGSINH != value))
				{
					this.OnNGSINHChanging(value);
					this.SendPropertyChanging();
					this._NGSINH = value;
					this.SendPropertyChanged("NGSINH");
					this.OnNGSINHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USERNAME", DbType="VarChar(100)")]
		public string USERNAME
		{
			get
			{
				return this._USERNAME;
			}
			set
			{
				if ((this._USERNAME != value))
				{
					this.OnUSERNAMEChanging(value);
					this.SendPropertyChanging();
					this._USERNAME = value;
					this.SendPropertyChanged("USERNAME");
					this.OnUSERNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PASSWORD", DbType="NChar(100)")]
		public string PASSWORD
		{
			get
			{
				return this._PASSWORD;
			}
			set
			{
				if ((this._PASSWORD != value))
				{
					this.OnPASSWORDChanging(value);
					this.SendPropertyChanging();
					this._PASSWORD = value;
					this.SendPropertyChanged("PASSWORD");
					this.OnPASSWORDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_DANHGIA", Storage="_DANHGIAs", ThisKey="IDUSER", OtherKey="IDUSER")]
		public EntitySet<DANHGIA> DANHGIAs
		{
			get
			{
				return this._DANHGIAs;
			}
			set
			{
				this._DANHGIAs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_HOADON", Storage="_HOADONs", ThisKey="IDUSER", OtherKey="IDUSER")]
		public EntitySet<HOADON> HOADONs
		{
			get
			{
				return this._HOADONs;
			}
			set
			{
				this._HOADONs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROLE_USER", Storage="_ROLE", ThisKey="IDROLE", OtherKey="IDROLE", IsForeignKey=true)]
		public ROLE ROLE
		{
			get
			{
				return this._ROLE.Entity;
			}
			set
			{
				ROLE previousValue = this._ROLE.Entity;
				if (((previousValue != value) 
							|| (this._ROLE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ROLE.Entity = null;
						previousValue.USERs.Remove(this);
					}
					this._ROLE.Entity = value;
					if ((value != null))
					{
						value.USERs.Add(this);
						this._IDROLE = value.IDROLE;
					}
					else
					{
						this._IDROLE = default(Nullable<int>);
					}
					this.SendPropertyChanged("ROLE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DANHGIAs(DANHGIA entity)
		{
			this.SendPropertyChanging();
			entity.USER = this;
		}
		
		private void detach_DANHGIAs(DANHGIA entity)
		{
			this.SendPropertyChanging();
			entity.USER = null;
		}
		
		private void attach_HOADONs(HOADON entity)
		{
			this.SendPropertyChanging();
			entity.USER = this;
		}
		
		private void detach_HOADONs(HOADON entity)
		{
			this.SendPropertyChanging();
			entity.USER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CTPHIEUNHAP")]
	public partial class CTPHIEUNHAP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDCTPHIEUNHAP;
		
		private System.Nullable<int> _IDPHIEUNHAP;
		
		private System.Nullable<int> _IDSP;
		
		private System.Nullable<int> _DONGIANHAP;
		
		private System.Nullable<int> _SLNHAP;
		
		private EntityRef<PHIEUNHAP> _PHIEUNHAP;
		
		private EntityRef<SANPHAM> _SANPHAM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCTPHIEUNHAPChanging(int value);
    partial void OnIDCTPHIEUNHAPChanged();
    partial void OnIDPHIEUNHAPChanging(System.Nullable<int> value);
    partial void OnIDPHIEUNHAPChanged();
    partial void OnIDSPChanging(System.Nullable<int> value);
    partial void OnIDSPChanged();
    partial void OnDONGIANHAPChanging(System.Nullable<int> value);
    partial void OnDONGIANHAPChanged();
    partial void OnSLNHAPChanging(System.Nullable<int> value);
    partial void OnSLNHAPChanged();
    #endregion
		
		public CTPHIEUNHAP()
		{
			this._PHIEUNHAP = default(EntityRef<PHIEUNHAP>);
			this._SANPHAM = default(EntityRef<SANPHAM>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCTPHIEUNHAP", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDCTPHIEUNHAP
		{
			get
			{
				return this._IDCTPHIEUNHAP;
			}
			set
			{
				if ((this._IDCTPHIEUNHAP != value))
				{
					this.OnIDCTPHIEUNHAPChanging(value);
					this.SendPropertyChanging();
					this._IDCTPHIEUNHAP = value;
					this.SendPropertyChanged("IDCTPHIEUNHAP");
					this.OnIDCTPHIEUNHAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPHIEUNHAP", DbType="Int")]
		public System.Nullable<int> IDPHIEUNHAP
		{
			get
			{
				return this._IDPHIEUNHAP;
			}
			set
			{
				if ((this._IDPHIEUNHAP != value))
				{
					if (this._PHIEUNHAP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPHIEUNHAPChanging(value);
					this.SendPropertyChanging();
					this._IDPHIEUNHAP = value;
					this.SendPropertyChanged("IDPHIEUNHAP");
					this.OnIDPHIEUNHAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSP", DbType="Int")]
		public System.Nullable<int> IDSP
		{
			get
			{
				return this._IDSP;
			}
			set
			{
				if ((this._IDSP != value))
				{
					if (this._SANPHAM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSPChanging(value);
					this.SendPropertyChanging();
					this._IDSP = value;
					this.SendPropertyChanged("IDSP");
					this.OnIDSPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DONGIANHAP", DbType="Int")]
		public System.Nullable<int> DONGIANHAP
		{
			get
			{
				return this._DONGIANHAP;
			}
			set
			{
				if ((this._DONGIANHAP != value))
				{
					this.OnDONGIANHAPChanging(value);
					this.SendPropertyChanging();
					this._DONGIANHAP = value;
					this.SendPropertyChanged("DONGIANHAP");
					this.OnDONGIANHAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SLNHAP", DbType="Int")]
		public System.Nullable<int> SLNHAP
		{
			get
			{
				return this._SLNHAP;
			}
			set
			{
				if ((this._SLNHAP != value))
				{
					this.OnSLNHAPChanging(value);
					this.SendPropertyChanging();
					this._SLNHAP = value;
					this.SendPropertyChanged("SLNHAP");
					this.OnSLNHAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PHIEUNHAP_CTPHIEUNHAP", Storage="_PHIEUNHAP", ThisKey="IDPHIEUNHAP", OtherKey="IDPHIEUNHAP", IsForeignKey=true)]
		public PHIEUNHAP PHIEUNHAP
		{
			get
			{
				return this._PHIEUNHAP.Entity;
			}
			set
			{
				PHIEUNHAP previousValue = this._PHIEUNHAP.Entity;
				if (((previousValue != value) 
							|| (this._PHIEUNHAP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PHIEUNHAP.Entity = null;
						previousValue.CTPHIEUNHAPs.Remove(this);
					}
					this._PHIEUNHAP.Entity = value;
					if ((value != null))
					{
						value.CTPHIEUNHAPs.Add(this);
						this._IDPHIEUNHAP = value.IDPHIEUNHAP;
					}
					else
					{
						this._IDPHIEUNHAP = default(Nullable<int>);
					}
					this.SendPropertyChanged("PHIEUNHAP");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SANPHAM_CTPHIEUNHAP", Storage="_SANPHAM", ThisKey="IDSP", OtherKey="IDSP", IsForeignKey=true)]
		public SANPHAM SANPHAM
		{
			get
			{
				return this._SANPHAM.Entity;
			}
			set
			{
				SANPHAM previousValue = this._SANPHAM.Entity;
				if (((previousValue != value) 
							|| (this._SANPHAM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SANPHAM.Entity = null;
						previousValue.CTPHIEUNHAPs.Remove(this);
					}
					this._SANPHAM.Entity = value;
					if ((value != null))
					{
						value.CTPHIEUNHAPs.Add(this);
						this._IDSP = value.IDSP;
					}
					else
					{
						this._IDSP = default(Nullable<int>);
					}
					this.SendPropertyChanged("SANPHAM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DANHGIA")]
	public partial class DANHGIA : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDDG;
		
		private System.Nullable<int> _IDSP;
		
		private System.Nullable<int> _IDUSER;
		
		private System.Nullable<int> _SOSAO;
		
		private string _NOTE;
		
		private EntityRef<USER> _USER;
		
		private EntityRef<SANPHAM> _SANPHAM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDDGChanging(int value);
    partial void OnIDDGChanged();
    partial void OnIDSPChanging(System.Nullable<int> value);
    partial void OnIDSPChanged();
    partial void OnIDUSERChanging(System.Nullable<int> value);
    partial void OnIDUSERChanged();
    partial void OnSOSAOChanging(System.Nullable<int> value);
    partial void OnSOSAOChanged();
    partial void OnNOTEChanging(string value);
    partial void OnNOTEChanged();
    #endregion
		
		public DANHGIA()
		{
			this._USER = default(EntityRef<USER>);
			this._SANPHAM = default(EntityRef<SANPHAM>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDG", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDDG
		{
			get
			{
				return this._IDDG;
			}
			set
			{
				if ((this._IDDG != value))
				{
					this.OnIDDGChanging(value);
					this.SendPropertyChanging();
					this._IDDG = value;
					this.SendPropertyChanged("IDDG");
					this.OnIDDGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSP", DbType="Int")]
		public System.Nullable<int> IDSP
		{
			get
			{
				return this._IDSP;
			}
			set
			{
				if ((this._IDSP != value))
				{
					if (this._SANPHAM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSPChanging(value);
					this.SendPropertyChanging();
					this._IDSP = value;
					this.SendPropertyChanged("IDSP");
					this.OnIDSPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUSER", DbType="Int")]
		public System.Nullable<int> IDUSER
		{
			get
			{
				return this._IDUSER;
			}
			set
			{
				if ((this._IDUSER != value))
				{
					if (this._USER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDUSERChanging(value);
					this.SendPropertyChanging();
					this._IDUSER = value;
					this.SendPropertyChanged("IDUSER");
					this.OnIDUSERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SOSAO", DbType="Int")]
		public System.Nullable<int> SOSAO
		{
			get
			{
				return this._SOSAO;
			}
			set
			{
				if ((this._SOSAO != value))
				{
					this.OnSOSAOChanging(value);
					this.SendPropertyChanging();
					this._SOSAO = value;
					this.SendPropertyChanged("SOSAO");
					this.OnSOSAOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NOTE", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string NOTE
		{
			get
			{
				return this._NOTE;
			}
			set
			{
				if ((this._NOTE != value))
				{
					this.OnNOTEChanging(value);
					this.SendPropertyChanging();
					this._NOTE = value;
					this.SendPropertyChanged("NOTE");
					this.OnNOTEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_DANHGIA", Storage="_USER", ThisKey="IDUSER", OtherKey="IDUSER", IsForeignKey=true)]
		public USER USER
		{
			get
			{
				return this._USER.Entity;
			}
			set
			{
				USER previousValue = this._USER.Entity;
				if (((previousValue != value) 
							|| (this._USER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER.Entity = null;
						previousValue.DANHGIAs.Remove(this);
					}
					this._USER.Entity = value;
					if ((value != null))
					{
						value.DANHGIAs.Add(this);
						this._IDUSER = value.IDUSER;
					}
					else
					{
						this._IDUSER = default(Nullable<int>);
					}
					this.SendPropertyChanged("USER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SANPHAM_DANHGIA", Storage="_SANPHAM", ThisKey="IDSP", OtherKey="IDSP", IsForeignKey=true)]
		public SANPHAM SANPHAM
		{
			get
			{
				return this._SANPHAM.Entity;
			}
			set
			{
				SANPHAM previousValue = this._SANPHAM.Entity;
				if (((previousValue != value) 
							|| (this._SANPHAM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SANPHAM.Entity = null;
						previousValue.DANHGIAs.Remove(this);
					}
					this._SANPHAM.Entity = value;
					if ((value != null))
					{
						value.DANHGIAs.Add(this);
						this._IDSP = value.IDSP;
					}
					else
					{
						this._IDSP = default(Nullable<int>);
					}
					this.SendPropertyChanged("SANPHAM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HOADON")]
	public partial class HOADON : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDHD;
		
		private System.Nullable<System.DateTime> _NGLAPHD;
		
		private System.Nullable<int> _IDUSER;
		
		private EntitySet<CTHD> _CTHDs;
		
		private EntityRef<USER> _USER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDHDChanging(int value);
    partial void OnIDHDChanged();
    partial void OnNGLAPHDChanging(System.Nullable<System.DateTime> value);
    partial void OnNGLAPHDChanged();
    partial void OnIDUSERChanging(System.Nullable<int> value);
    partial void OnIDUSERChanged();
    #endregion
		
		public HOADON()
		{
			this._CTHDs = new EntitySet<CTHD>(new Action<CTHD>(this.attach_CTHDs), new Action<CTHD>(this.detach_CTHDs));
			this._USER = default(EntityRef<USER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDHD", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDHD
		{
			get
			{
				return this._IDHD;
			}
			set
			{
				if ((this._IDHD != value))
				{
					this.OnIDHDChanging(value);
					this.SendPropertyChanging();
					this._IDHD = value;
					this.SendPropertyChanged("IDHD");
					this.OnIDHDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NGLAPHD", DbType="DateTime")]
		public System.Nullable<System.DateTime> NGLAPHD
		{
			get
			{
				return this._NGLAPHD;
			}
			set
			{
				if ((this._NGLAPHD != value))
				{
					this.OnNGLAPHDChanging(value);
					this.SendPropertyChanging();
					this._NGLAPHD = value;
					this.SendPropertyChanged("NGLAPHD");
					this.OnNGLAPHDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUSER", DbType="Int")]
		public System.Nullable<int> IDUSER
		{
			get
			{
				return this._IDUSER;
			}
			set
			{
				if ((this._IDUSER != value))
				{
					if (this._USER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDUSERChanging(value);
					this.SendPropertyChanging();
					this._IDUSER = value;
					this.SendPropertyChanged("IDUSER");
					this.OnIDUSERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HOADON_CTHD", Storage="_CTHDs", ThisKey="IDHD", OtherKey="IDHD")]
		public EntitySet<CTHD> CTHDs
		{
			get
			{
				return this._CTHDs;
			}
			set
			{
				this._CTHDs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_HOADON", Storage="_USER", ThisKey="IDUSER", OtherKey="IDUSER", IsForeignKey=true)]
		public USER USER
		{
			get
			{
				return this._USER.Entity;
			}
			set
			{
				USER previousValue = this._USER.Entity;
				if (((previousValue != value) 
							|| (this._USER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER.Entity = null;
						previousValue.HOADONs.Remove(this);
					}
					this._USER.Entity = value;
					if ((value != null))
					{
						value.HOADONs.Add(this);
						this._IDUSER = value.IDUSER;
					}
					else
					{
						this._IDUSER = default(Nullable<int>);
					}
					this.SendPropertyChanged("USER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CTHDs(CTHD entity)
		{
			this.SendPropertyChanging();
			entity.HOADON = this;
		}
		
		private void detach_CTHDs(CTHD entity)
		{
			this.SendPropertyChanging();
			entity.HOADON = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NHACC")]
	public partial class NHACC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDNCC;
		
		private string _TENNCC;
		
		private string _DIACHI;
		
		private string _SDT;
		
		private EntitySet<PHIEUNHAP> _PHIEUNHAPs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDNCCChanging(int value);
    partial void OnIDNCCChanged();
    partial void OnTENNCCChanging(string value);
    partial void OnTENNCCChanged();
    partial void OnDIACHIChanging(string value);
    partial void OnDIACHIChanged();
    partial void OnSDTChanging(string value);
    partial void OnSDTChanged();
    #endregion
		
		public NHACC()
		{
			this._PHIEUNHAPs = new EntitySet<PHIEUNHAP>(new Action<PHIEUNHAP>(this.attach_PHIEUNHAPs), new Action<PHIEUNHAP>(this.detach_PHIEUNHAPs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNCC", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDNCC
		{
			get
			{
				return this._IDNCC;
			}
			set
			{
				if ((this._IDNCC != value))
				{
					this.OnIDNCCChanging(value);
					this.SendPropertyChanging();
					this._IDNCC = value;
					this.SendPropertyChanged("IDNCC");
					this.OnIDNCCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENNCC", DbType="NVarChar(255)")]
		public string TENNCC
		{
			get
			{
				return this._TENNCC;
			}
			set
			{
				if ((this._TENNCC != value))
				{
					this.OnTENNCCChanging(value);
					this.SendPropertyChanging();
					this._TENNCC = value;
					this.SendPropertyChanged("TENNCC");
					this.OnTENNCCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIACHI", DbType="NVarChar(255)")]
		public string DIACHI
		{
			get
			{
				return this._DIACHI;
			}
			set
			{
				if ((this._DIACHI != value))
				{
					this.OnDIACHIChanging(value);
					this.SendPropertyChanging();
					this._DIACHI = value;
					this.SendPropertyChanged("DIACHI");
					this.OnDIACHIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SDT", DbType="Char(15)")]
		public string SDT
		{
			get
			{
				return this._SDT;
			}
			set
			{
				if ((this._SDT != value))
				{
					this.OnSDTChanging(value);
					this.SendPropertyChanging();
					this._SDT = value;
					this.SendPropertyChanged("SDT");
					this.OnSDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NHACC_PHIEUNHAP", Storage="_PHIEUNHAPs", ThisKey="IDNCC", OtherKey="IDNCC")]
		public EntitySet<PHIEUNHAP> PHIEUNHAPs
		{
			get
			{
				return this._PHIEUNHAPs;
			}
			set
			{
				this._PHIEUNHAPs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PHIEUNHAPs(PHIEUNHAP entity)
		{
			this.SendPropertyChanging();
			entity.NHACC = this;
		}
		
		private void detach_PHIEUNHAPs(PHIEUNHAP entity)
		{
			this.SendPropertyChanging();
			entity.NHACC = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PHIEUNHAP")]
	public partial class PHIEUNHAP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDPHIEUNHAP;
		
		private System.DateTime _NGAYNHAP;
		
		private System.Nullable<int> _IDNCC;
		
		private EntitySet<CTPHIEUNHAP> _CTPHIEUNHAPs;
		
		private EntityRef<NHACC> _NHACC;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDPHIEUNHAPChanging(int value);
    partial void OnIDPHIEUNHAPChanged();
    partial void OnNGAYNHAPChanging(System.DateTime value);
    partial void OnNGAYNHAPChanged();
    partial void OnIDNCCChanging(System.Nullable<int> value);
    partial void OnIDNCCChanged();
    #endregion
		
		public PHIEUNHAP()
		{
			this._CTPHIEUNHAPs = new EntitySet<CTPHIEUNHAP>(new Action<CTPHIEUNHAP>(this.attach_CTPHIEUNHAPs), new Action<CTPHIEUNHAP>(this.detach_CTPHIEUNHAPs));
			this._NHACC = default(EntityRef<NHACC>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPHIEUNHAP", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDPHIEUNHAP
		{
			get
			{
				return this._IDPHIEUNHAP;
			}
			set
			{
				if ((this._IDPHIEUNHAP != value))
				{
					this.OnIDPHIEUNHAPChanging(value);
					this.SendPropertyChanging();
					this._IDPHIEUNHAP = value;
					this.SendPropertyChanged("IDPHIEUNHAP");
					this.OnIDPHIEUNHAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NGAYNHAP", DbType="DateTime NOT NULL")]
		public System.DateTime NGAYNHAP
		{
			get
			{
				return this._NGAYNHAP;
			}
			set
			{
				if ((this._NGAYNHAP != value))
				{
					this.OnNGAYNHAPChanging(value);
					this.SendPropertyChanging();
					this._NGAYNHAP = value;
					this.SendPropertyChanged("NGAYNHAP");
					this.OnNGAYNHAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNCC", DbType="Int")]
		public System.Nullable<int> IDNCC
		{
			get
			{
				return this._IDNCC;
			}
			set
			{
				if ((this._IDNCC != value))
				{
					if (this._NHACC.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDNCCChanging(value);
					this.SendPropertyChanging();
					this._IDNCC = value;
					this.SendPropertyChanged("IDNCC");
					this.OnIDNCCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PHIEUNHAP_CTPHIEUNHAP", Storage="_CTPHIEUNHAPs", ThisKey="IDPHIEUNHAP", OtherKey="IDPHIEUNHAP")]
		public EntitySet<CTPHIEUNHAP> CTPHIEUNHAPs
		{
			get
			{
				return this._CTPHIEUNHAPs;
			}
			set
			{
				this._CTPHIEUNHAPs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NHACC_PHIEUNHAP", Storage="_NHACC", ThisKey="IDNCC", OtherKey="IDNCC", IsForeignKey=true)]
		public NHACC NHACC
		{
			get
			{
				return this._NHACC.Entity;
			}
			set
			{
				NHACC previousValue = this._NHACC.Entity;
				if (((previousValue != value) 
							|| (this._NHACC.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NHACC.Entity = null;
						previousValue.PHIEUNHAPs.Remove(this);
					}
					this._NHACC.Entity = value;
					if ((value != null))
					{
						value.PHIEUNHAPs.Add(this);
						this._IDNCC = value.IDNCC;
					}
					else
					{
						this._IDNCC = default(Nullable<int>);
					}
					this.SendPropertyChanged("NHACC");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CTPHIEUNHAPs(CTPHIEUNHAP entity)
		{
			this.SendPropertyChanging();
			entity.PHIEUNHAP = this;
		}
		
		private void detach_CTPHIEUNHAPs(CTPHIEUNHAP entity)
		{
			this.SendPropertyChanging();
			entity.PHIEUNHAP = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ROLES")]
	public partial class ROLE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDROLE;
		
		private string _NAMEROLE;
		
		private EntitySet<USER> _USERs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDROLEChanging(int value);
    partial void OnIDROLEChanged();
    partial void OnNAMEROLEChanging(string value);
    partial void OnNAMEROLEChanged();
    #endregion
		
		public ROLE()
		{
			this._USERs = new EntitySet<USER>(new Action<USER>(this.attach_USERs), new Action<USER>(this.detach_USERs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDROLE", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDROLE
		{
			get
			{
				return this._IDROLE;
			}
			set
			{
				if ((this._IDROLE != value))
				{
					this.OnIDROLEChanging(value);
					this.SendPropertyChanging();
					this._IDROLE = value;
					this.SendPropertyChanged("IDROLE");
					this.OnIDROLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAMEROLE", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string NAMEROLE
		{
			get
			{
				return this._NAMEROLE;
			}
			set
			{
				if ((this._NAMEROLE != value))
				{
					this.OnNAMEROLEChanging(value);
					this.SendPropertyChanging();
					this._NAMEROLE = value;
					this.SendPropertyChanged("NAMEROLE");
					this.OnNAMEROLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROLE_USER", Storage="_USERs", ThisKey="IDROLE", OtherKey="IDROLE")]
		public EntitySet<USER> USERs
		{
			get
			{
				return this._USERs;
			}
			set
			{
				this._USERs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_USERs(USER entity)
		{
			this.SendPropertyChanging();
			entity.ROLE = this;
		}
		
		private void detach_USERs(USER entity)
		{
			this.SendPropertyChanging();
			entity.ROLE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SANPHAM")]
	public partial class SANPHAM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDSP;
		
		private int _IDTHUONGHIEU;
		
		private string _TENSP;
		
		private System.Nullable<int> _SIZE;
		
		private string _LOAI;
		
		private System.Nullable<int> _GIABAN;
		
		private System.Nullable<int> _SOLUONG;
		
		private string _HINHANHSP;
		
		private string _MOTA;
		
		private EntitySet<CTHD> _CTHDs;
		
		private EntitySet<CTPHIEUNHAP> _CTPHIEUNHAPs;
		
		private EntitySet<DANHGIA> _DANHGIAs;
		
		private EntityRef<THUONGHIEU> _THUONGHIEU;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDSPChanging(int value);
    partial void OnIDSPChanged();
    partial void OnIDTHUONGHIEUChanging(int value);
    partial void OnIDTHUONGHIEUChanged();
    partial void OnTENSPChanging(string value);
    partial void OnTENSPChanged();
    partial void OnSIZEChanging(System.Nullable<int> value);
    partial void OnSIZEChanged();
    partial void OnLOAIChanging(string value);
    partial void OnLOAIChanged();
    partial void OnGIABANChanging(System.Nullable<int> value);
    partial void OnGIABANChanged();
    partial void OnSOLUONGChanging(System.Nullable<int> value);
    partial void OnSOLUONGChanged();
    partial void OnHINHANHSPChanging(string value);
    partial void OnHINHANHSPChanged();
    partial void OnMOTAChanging(string value);
    partial void OnMOTAChanged();
    #endregion
		
		public SANPHAM()
		{
			this._CTHDs = new EntitySet<CTHD>(new Action<CTHD>(this.attach_CTHDs), new Action<CTHD>(this.detach_CTHDs));
			this._CTPHIEUNHAPs = new EntitySet<CTPHIEUNHAP>(new Action<CTPHIEUNHAP>(this.attach_CTPHIEUNHAPs), new Action<CTPHIEUNHAP>(this.detach_CTPHIEUNHAPs));
			this._DANHGIAs = new EntitySet<DANHGIA>(new Action<DANHGIA>(this.attach_DANHGIAs), new Action<DANHGIA>(this.detach_DANHGIAs));
			this._THUONGHIEU = default(EntityRef<THUONGHIEU>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSP", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDSP
		{
			get
			{
				return this._IDSP;
			}
			set
			{
				if ((this._IDSP != value))
				{
					this.OnIDSPChanging(value);
					this.SendPropertyChanging();
					this._IDSP = value;
					this.SendPropertyChanged("IDSP");
					this.OnIDSPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTHUONGHIEU", DbType="Int NOT NULL")]
		public int IDTHUONGHIEU
		{
			get
			{
				return this._IDTHUONGHIEU;
			}
			set
			{
				if ((this._IDTHUONGHIEU != value))
				{
					if (this._THUONGHIEU.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDTHUONGHIEUChanging(value);
					this.SendPropertyChanging();
					this._IDTHUONGHIEU = value;
					this.SendPropertyChanged("IDTHUONGHIEU");
					this.OnIDTHUONGHIEUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENSP", DbType="NVarChar(255)")]
		public string TENSP
		{
			get
			{
				return this._TENSP;
			}
			set
			{
				if ((this._TENSP != value))
				{
					this.OnTENSPChanging(value);
					this.SendPropertyChanging();
					this._TENSP = value;
					this.SendPropertyChanged("TENSP");
					this.OnTENSPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SIZE", DbType="Int")]
		public System.Nullable<int> SIZE
		{
			get
			{
				return this._SIZE;
			}
			set
			{
				if ((this._SIZE != value))
				{
					this.OnSIZEChanging(value);
					this.SendPropertyChanging();
					this._SIZE = value;
					this.SendPropertyChanged("SIZE");
					this.OnSIZEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LOAI", DbType="NVarChar(10)")]
		public string LOAI
		{
			get
			{
				return this._LOAI;
			}
			set
			{
				if ((this._LOAI != value))
				{
					this.OnLOAIChanging(value);
					this.SendPropertyChanging();
					this._LOAI = value;
					this.SendPropertyChanged("LOAI");
					this.OnLOAIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GIABAN", DbType="Int")]
		public System.Nullable<int> GIABAN
		{
			get
			{
				return this._GIABAN;
			}
			set
			{
				if ((this._GIABAN != value))
				{
					this.OnGIABANChanging(value);
					this.SendPropertyChanging();
					this._GIABAN = value;
					this.SendPropertyChanged("GIABAN");
					this.OnGIABANChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SOLUONG", DbType="Int")]
		public System.Nullable<int> SOLUONG
		{
			get
			{
				return this._SOLUONG;
			}
			set
			{
				if ((this._SOLUONG != value))
				{
					this.OnSOLUONGChanging(value);
					this.SendPropertyChanging();
					this._SOLUONG = value;
					this.SendPropertyChanged("SOLUONG");
					this.OnSOLUONGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HINHANHSP", DbType="NVarChar(255)")]
		public string HINHANHSP
		{
			get
			{
				return this._HINHANHSP;
			}
			set
			{
				if ((this._HINHANHSP != value))
				{
					this.OnHINHANHSPChanging(value);
					this.SendPropertyChanging();
					this._HINHANHSP = value;
					this.SendPropertyChanged("HINHANHSP");
					this.OnHINHANHSPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MOTA", DbType="NVarChar(255)")]
		public string MOTA
		{
			get
			{
				return this._MOTA;
			}
			set
			{
				if ((this._MOTA != value))
				{
					this.OnMOTAChanging(value);
					this.SendPropertyChanging();
					this._MOTA = value;
					this.SendPropertyChanged("MOTA");
					this.OnMOTAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SANPHAM_CTHD", Storage="_CTHDs", ThisKey="IDSP", OtherKey="IDSP")]
		public EntitySet<CTHD> CTHDs
		{
			get
			{
				return this._CTHDs;
			}
			set
			{
				this._CTHDs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SANPHAM_CTPHIEUNHAP", Storage="_CTPHIEUNHAPs", ThisKey="IDSP", OtherKey="IDSP")]
		public EntitySet<CTPHIEUNHAP> CTPHIEUNHAPs
		{
			get
			{
				return this._CTPHIEUNHAPs;
			}
			set
			{
				this._CTPHIEUNHAPs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SANPHAM_DANHGIA", Storage="_DANHGIAs", ThisKey="IDSP", OtherKey="IDSP")]
		public EntitySet<DANHGIA> DANHGIAs
		{
			get
			{
				return this._DANHGIAs;
			}
			set
			{
				this._DANHGIAs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="THUONGHIEU_SANPHAM", Storage="_THUONGHIEU", ThisKey="IDTHUONGHIEU", OtherKey="IDTHUONGHIEU", IsForeignKey=true)]
		public THUONGHIEU THUONGHIEU
		{
			get
			{
				return this._THUONGHIEU.Entity;
			}
			set
			{
				THUONGHIEU previousValue = this._THUONGHIEU.Entity;
				if (((previousValue != value) 
							|| (this._THUONGHIEU.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._THUONGHIEU.Entity = null;
						previousValue.SANPHAMs.Remove(this);
					}
					this._THUONGHIEU.Entity = value;
					if ((value != null))
					{
						value.SANPHAMs.Add(this);
						this._IDTHUONGHIEU = value.IDTHUONGHIEU;
					}
					else
					{
						this._IDTHUONGHIEU = default(int);
					}
					this.SendPropertyChanged("THUONGHIEU");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CTHDs(CTHD entity)
		{
			this.SendPropertyChanging();
			entity.SANPHAM = this;
		}
		
		private void detach_CTHDs(CTHD entity)
		{
			this.SendPropertyChanging();
			entity.SANPHAM = null;
		}
		
		private void attach_CTPHIEUNHAPs(CTPHIEUNHAP entity)
		{
			this.SendPropertyChanging();
			entity.SANPHAM = this;
		}
		
		private void detach_CTPHIEUNHAPs(CTPHIEUNHAP entity)
		{
			this.SendPropertyChanging();
			entity.SANPHAM = null;
		}
		
		private void attach_DANHGIAs(DANHGIA entity)
		{
			this.SendPropertyChanging();
			entity.SANPHAM = this;
		}
		
		private void detach_DANHGIAs(DANHGIA entity)
		{
			this.SendPropertyChanging();
			entity.SANPHAM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.THUONGHIEU")]
	public partial class THUONGHIEU : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDTHUONGHIEU;
		
		private string _TENTHUONGHIEU;
		
		private EntitySet<SANPHAM> _SANPHAMs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDTHUONGHIEUChanging(int value);
    partial void OnIDTHUONGHIEUChanged();
    partial void OnTENTHUONGHIEUChanging(string value);
    partial void OnTENTHUONGHIEUChanged();
    #endregion
		
		public THUONGHIEU()
		{
			this._SANPHAMs = new EntitySet<SANPHAM>(new Action<SANPHAM>(this.attach_SANPHAMs), new Action<SANPHAM>(this.detach_SANPHAMs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTHUONGHIEU", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDTHUONGHIEU
		{
			get
			{
				return this._IDTHUONGHIEU;
			}
			set
			{
				if ((this._IDTHUONGHIEU != value))
				{
					this.OnIDTHUONGHIEUChanging(value);
					this.SendPropertyChanging();
					this._IDTHUONGHIEU = value;
					this.SendPropertyChanged("IDTHUONGHIEU");
					this.OnIDTHUONGHIEUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENTHUONGHIEU", DbType="NVarChar(50)")]
		public string TENTHUONGHIEU
		{
			get
			{
				return this._TENTHUONGHIEU;
			}
			set
			{
				if ((this._TENTHUONGHIEU != value))
				{
					this.OnTENTHUONGHIEUChanging(value);
					this.SendPropertyChanging();
					this._TENTHUONGHIEU = value;
					this.SendPropertyChanged("TENTHUONGHIEU");
					this.OnTENTHUONGHIEUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="THUONGHIEU_SANPHAM", Storage="_SANPHAMs", ThisKey="IDTHUONGHIEU", OtherKey="IDTHUONGHIEU")]
		public EntitySet<SANPHAM> SANPHAMs
		{
			get
			{
				return this._SANPHAMs;
			}
			set
			{
				this._SANPHAMs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SANPHAMs(SANPHAM entity)
		{
			this.SendPropertyChanging();
			entity.THUONGHIEU = this;
		}
		
		private void detach_SANPHAMs(SANPHAM entity)
		{
			this.SendPropertyChanging();
			entity.THUONGHIEU = null;
		}
	}
}
#pragma warning restore 1591
